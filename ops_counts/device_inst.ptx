//
// Generated by LLVM NVPTX Back-End
//

.version 7.8
.target sm_90
.address_size 64

	// .globl	__record_binop          // -- Begin function __record_binop
.visible .global .align 8 .b8 gBinOpCounts[48];
                                        // @__record_binop
.visible .func __record_binop(
	.param .b32 __record_binop_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<5>;

// %bb.0:
	ld.param.u32 	%r1, [__record_binop_param_0];
	setp.gt.u32 	%p1, %r1, 5;
	@%p1 bra 	$L__BB0_2;
// %bb.1:
	mul.wide.u32 	%rd2, %r1, 8;
	mov.u64 	%rd3, gBinOpCounts;
	add.s64 	%rd1, %rd3, %rd2;
	atom.global.add.u64 	%rd4, [%rd1], 1;
$L__BB0_2:
	ret;
                                        // -- End function
}
	// .globl	divKernel               // -- Begin function divKernel
.visible .entry divKernel(
	.param .u64 divKernel_param_0,
	.param .u64 divKernel_param_1,
	.param .u64 divKernel_param_2,
	.param .u32 divKernel_param_3
)                                       // @divKernel
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .f32 	%f<17>;
	.reg .b64 	%rd<11>;

// %bb.0:
	ld.param.u32 	%r2, [divKernel_param_3];
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB1_2;
// %bb.1:
	ld.param.u64 	%rd4, [divKernel_param_0];
	ld.param.u64 	%rd5, [divKernel_param_2];
	cvta.to.global.u64 	%rd1, %rd5;
	ld.param.u64 	%rd6, [divKernel_param_1];
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd4;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.f32 	%f1, [%rd8];
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.f32 	%f2, [%rd9];
	fma.rn.f32 	%f3, %f1, %f2, 0f3F800000;
	{ // callseq 0, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 5;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 0
	add.rn.f32 	%f4, %f3, 0f3F800000;
	{ // callseq 1, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 0;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 1
	add.rn.f32 	%f5, %f4, 0f40000000;
	{ // callseq 2, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 0;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 2
	add.rn.f32 	%f6, %f5, 0f40400000;
	{ // callseq 3, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 0;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 3
	add.rn.f32 	%f7, %f6, 0fBF800000;
	{ // callseq 4, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 4
	add.rn.f32 	%f8, %f7, 0fC0000000;
	{ // callseq 5, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 5
	add.rn.f32 	%f9, %f8, 0fC0400000;
	{ // callseq 6, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 6
	add.rn.f32 	%f10, %f9, 0fC0800000;
	{ // callseq 7, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 7
	add.rn.f32 	%f11, %f10, 0fC0A00000;
	{ // callseq 8, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 8
	add.rn.f32 	%f12, %f11, 0fC0C00000;
	{ // callseq 9, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 9
	add.rn.f32 	%f13, %f12, 0fC0E00000;
	{ // callseq 10, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 10
	add.rn.f32 	%f14, %f13, 0fC1000000;
	{ // callseq 11, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 1;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 11
	add.rn.f32 	%f15, %f2, 0f1E3CE508;
	{ // callseq 12, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 0;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 12
	div.rn.f32 	%f16, %f14, %f15;
	{ // callseq 13, 0
	.param .b32 param0;
	st.param.b32 	[param0+0], 3;
	call.uni 
	__record_binop, 
	(
	param0
	);
	} // callseq 13
	add.s64 	%rd10, %rd1, %rd7;
	st.global.f32 	[%rd10], %f16;
$L__BB1_2:
	ret;
                                        // -- End function
}
